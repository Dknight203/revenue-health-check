import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { AIAnalysisResult } from "@/types/analyzer";
import { getArchetypeLabel } from "./contextClassifier";
import { APP_CONFIG } from "@/config/appConfig";

// Legacy export for old ReportCard component
export async function exportToPDF(elementId: string, filename: string = "report.pdf") {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error("Element not found");
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    backgroundColor: "#ffffff",
    logging: false
  });

  const imgData = canvas.toDataURL("image/png");
  const pdf = new jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: "a4"
  });

  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pdfHeight = pdf.internal.pageSize.getHeight();
  const imgWidth = canvas.width;
  const imgHeight = canvas.height;
  const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
  const imgX = (pdfWidth - imgWidth * ratio) / 2;
  const imgY = 10;

  pdf.addImage(imgData, "PNG", imgX, imgY, imgWidth * ratio, imgHeight * ratio);
  pdf.save(filename);
}

export async function exportAIReportToPDF(result: AIAnalysisResult) {
  const pdf = new jsPDF("p", "mm", "a4");
  const margin = 20;
  const maxWidth = pdf.internal.pageSize.getWidth() - (margin * 2);
  let yPos = 20;

  pdf.setFontSize(24);
  pdf.setTextColor(74, 94, 126);
  pdf.text("Game Revenue Analysis", margin, yPos);
  yPos += 15;

  pdf.setFontSize(18);
  pdf.setTextColor(0, 0, 0);
  const gameTitle = pdf.splitTextToSize(result.gameContext.title, maxWidth);
  pdf.text(gameTitle, margin, yPos);
  yPos += (gameTitle.length * 8) + 5;

  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(getArchetypeLabel(result.gameContext.archetype), margin, yPos);
  yPos += 12;

  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Revenue Health Score: ${result.overallScore}/100`, margin, yPos);
  yPos += 15;

  pdf.setFontSize(14);
  pdf.text("Top Revenue Opportunities:", margin, yPos);
  yPos += 10;

  result.opportunities.forEach((opportunity, index) => {
    if (yPos > pdf.internal.pageSize.getHeight() - 40) {
      pdf.addPage();
      yPos = 20;
    }

    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${index + 1}. ${opportunity.category}`, margin, yPos);
    yPos += 8;

    pdf.setFontSize(10);
    pdf.setTextColor(60, 60, 60);
    
    const diagnosisLines = pdf.splitTextToSize(opportunity.diagnosis, maxWidth - 5);
    pdf.text(diagnosisLines, margin + 5, yPos);
    yPos += (diagnosisLines.length * 5) + 5;

    pdf.setTextColor(0, 0, 0);
    pdf.text("Next Steps:", margin + 5, yPos);
    yPos += 5;

    opportunity.actions.forEach((action, actionIndex) => {
      const actionLines = pdf.splitTextToSize(`${actionIndex + 1}. ${action}`, maxWidth - 10);
      pdf.text(actionLines, margin + 10, yPos);
      yPos += (actionLines.length * 5) + 3;
    });

    yPos += 5;
  });

  yPos = pdf.internal.pageSize.getHeight() - 30;
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated by ${APP_CONFIG.siteName}`, margin, yPos);
  pdf.text(`Book a strategy call: ${APP_CONFIG.scheduleUrl}`, margin, yPos + 5);

  pdf.save(`${result.gameContext.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-revenue-analysis.pdf`);
}
